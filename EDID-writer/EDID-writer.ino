#include <Wire.h>

#define EEPROM_I2C_ADDR 0x50
#define EEPROM_I2C_SEGMENT_POINTER_ADDR 0x30

#if 0
// 24C02N ATMEL
#define EEPROM_SIZE 256  // 2048bits
#define EEPROM_WRITE_DELAY 5
#else
// CAT24C208 ON Semiconductor
#define EEPROM_SIZE 512  // 4096bits
#define EEPROM_I2C_CONFIG_ADDR 0x31
#define EEPROM_I2C_CONFIG_BYTE 0x0c // write enable, lower bank
#define EEPROM_WRITE_DELAY 10
#endif

/*
 * 4 block EDID
 */
byte eepromdat[] = {
    // block 0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // block 1
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // block 2
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    // block 3
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

byte i2c_eeprom_read_byte(uint8_t deviceaddress, uint16_t eeaddress ) {
    byte rdata = 0xFF;
    Wire.beginTransmission(deviceaddress);
    Wire.write(eeaddress);
    Wire.endTransmission();
    Wire.requestFrom(deviceaddress, (uint8_t)1);
    while (!Wire.available()); 
    rdata = Wire.read();
    return rdata;
}

void i2c_eeprom_read(uint8_t deviceaddress, uint16_t eeaddress, uint8_t* buffer, int size)
{
    memset(buffer, 0xFF, size);
    Wire.beginTransmission(deviceaddress);
    Wire.write(eeaddress);
    Wire.endTransmission();
    Wire.requestFrom(deviceaddress, (uint8_t)size);
    while (!Wire.available());
    for (int i = 0; i < size; i++)
        buffer[i] = Wire.read();
}

void dump(char* header, int start_addr, uint8_t* buffer, int size)
{
    int index;
    for (index = 0; index < size; index++) {
        if ((index % 16) == 0) {
            Serial.print(header);
            int addr = start_addr + index;
            if (addr < 0x1000) Serial.print('0');
            if (addr < 0x100) Serial.print('0');
            if (addr < 0x10) Serial.print('0');
            Serial.print(addr, HEX);
            Serial.print(": ");
        }
        Serial.print("0x");
        if (buffer[index] < 0x10) Serial.print('0');
        Serial.print(buffer[index], HEX);
        if ((index % 16) != 15)
            Serial.print(", ");
    }
    if ((index % 16) == 0)
        Serial.println();
}

void i2c_eeprom_write_byte(uint8_t deviceaddress, uint16_t eeaddress, byte data) {
    Wire.beginTransmission(deviceaddress);
    Wire.write((byte)eeaddress);
    Wire.write(data);
    Wire.endTransmission();
}

void i2c_write_byte(uint8_t deviceaddress, byte data) {
    Wire.beginTransmission(deviceaddress);
    Wire.write(data);
    Wire.endTransmission();
}

void write_read_verify(bool do_write, bool do_read, bool do_verify)
{
    byte b;
    uint8_t i2c_addr;
    Serial.println("Starting");

    if (do_verify) {
        do_read = true;
    }

#ifdef EEPROM_I2C_CONFIG_ADDR
    i2c_eeprom_write_byte(EEPROM_I2C_CONFIG_ADDR, 0, EEPROM_I2C_CONFIG_BYTE);
    delay(EEPROM_WRITE_DELAY);
    i2c_write_byte(EEPROM_I2C_SEGMENT_POINTER_ADDR, 0); // XXX
#endif
    for (uint16_t index = 0; index < EEPROM_SIZE; index++) {
        if (index < sizeof(eepromdat)) {
            b = eepromdat[index];
        } else {
            b = 0xFF;
        }
        uint8_t d =  b;

        if (do_write) {
            if (0x100 <= index) {
                i2c_write_byte(EEPROM_I2C_SEGMENT_POINTER_ADDR, 1);
            }
            i2c_eeprom_write_byte(EEPROM_I2C_ADDR, index % 0x100, b);
            delay(EEPROM_WRITE_DELAY);
	}
        if (do_read) {
            if (0x100 <= index) {
                i2c_write_byte(EEPROM_I2C_SEGMENT_POINTER_ADDR, 1);
            }
            d = i2c_eeprom_read_byte(EEPROM_I2C_ADDR, index % 0x100);
	}
        if (do_verify && b != d) {
            Serial.println();
            Serial.print(F("verification failed at 0x"));
	    Serial.print(index, HEX);
            Serial.print(", data=0x");
	    Serial.print(b, HEX);
            Serial.print(", eeprom=0x");
	    Serial.print(d, HEX);
            while (1);
        }

        if ((index % 16) == 0) {
            Serial.println();
            if (index < 0x100) Serial.print('0');
            if (index < 0x10) Serial.print('0');
            Serial.print(index, HEX);
            Serial.print(": ");
	}
        Serial.print("0x");
        if (d < 0x10) Serial.print('0');
        Serial.print(d, HEX); //print content to serial port
        if ((index % 16) != 15)
            Serial.print(", ");
    }
    if (do_verify && do_write) {
        Serial.println("\n\r========\n\rWrite and Verify finished!");
    } else
    if (do_verify) {
        Serial.println("\n\r========\n\rVerify finished!");
    } else
    if (do_write) {
        Serial.println("\n\r========\n\rWrite finished!");
    } else
    if (do_read) {
        Serial.println("\n\r========\n\rRead finished!");
    } else {
        Serial.println("\n\r========\n\rDump internal data finished!");
    }
}

void setup() {
    Serial.begin(9600);
    while (!Serial);
    Serial.println();
    Serial.println(F("EEPROM WRITER"));
    Serial.print(F("EEPROM data size: "));
    Serial.println(sizeof(eepromdat));

    Serial.println(F("Hit any key & return to start"));
    while (!Serial.available());

    Wire.begin(); // initialise the connection

    bool do_write = false;
    bool do_read = true;
    bool do_verify = true;

    write_read_verify(do_write, do_read, do_verify);
}

void loop() {
}
